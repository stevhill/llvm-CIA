; ModuleID = 'hadamard.c'
source_filename = "hadamard.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: nofree nosync nounwind readonly uwtable
define dso_local i32 @HadamardSAD8x8(i16* nocapture noundef readonly %0) local_unnamed_addr #0 !prof !34 {
  %2 = alloca [8 x [8 x i32]], align 16
  %3 = bitcast [8 x [8 x i32]]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3) #4
  br label %4

4:                                                ; preds = %1, %4
  %5 = phi i64 [ 0, %1 ], [ %70, %4 ]
  %6 = shl nuw nsw i64 %5, 3
  %7 = getelementptr inbounds i16, i16* %0, i64 %6
  %8 = load i16, i16* %7, align 2, !tbaa !35
  %9 = sext i16 %8 to i32
  %10 = or i64 %6, 4
  %11 = getelementptr inbounds i16, i16* %0, i64 %10
  %12 = load i16, i16* %11, align 2, !tbaa !35
  %13 = sext i16 %12 to i32
  %14 = add nsw i32 %13, %9
  %15 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 0
  %16 = or i64 %6, 1
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = load i16, i16* %17, align 2, !tbaa !35
  %19 = sext i16 %18 to i32
  %20 = or i64 %6, 5
  %21 = getelementptr inbounds i16, i16* %0, i64 %20
  %22 = load i16, i16* %21, align 2, !tbaa !35
  %23 = sext i16 %22 to i32
  %24 = add nsw i32 %23, %19
  %25 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 1
  %26 = or i64 %6, 2
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  %28 = load i16, i16* %27, align 2, !tbaa !35
  %29 = sext i16 %28 to i32
  %30 = or i64 %6, 6
  %31 = getelementptr inbounds i16, i16* %0, i64 %30
  %32 = load i16, i16* %31, align 2, !tbaa !35
  %33 = sext i16 %32 to i32
  %34 = add nsw i32 %33, %29
  %35 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 2
  %36 = or i64 %6, 3
  %37 = getelementptr inbounds i16, i16* %0, i64 %36
  %38 = load i16, i16* %37, align 2, !tbaa !35
  %39 = sext i16 %38 to i32
  %40 = or i64 %6, 7
  %41 = getelementptr inbounds i16, i16* %0, i64 %40
  %42 = load i16, i16* %41, align 2, !tbaa !35
  %43 = sext i16 %42 to i32
  %44 = add nsw i32 %43, %39
  %45 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 3
  %46 = sub nsw i32 %9, %13
  %47 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 4
  %48 = sub nsw i32 %19, %23
  %49 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 5
  %50 = sub nsw i32 %29, %33
  %51 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 6
  %52 = sub nsw i32 %39, %43
  %53 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %5, i64 7
  %54 = add nsw i32 %34, %14
  %55 = add nsw i32 %44, %24
  %56 = sub nsw i32 %14, %34
  %57 = sub nsw i32 %24, %44
  %58 = add nsw i32 %50, %46
  %59 = add nsw i32 %52, %48
  %60 = sub nsw i32 %46, %50
  %61 = sub nsw i32 %48, %52
  %62 = add nsw i32 %55, %54
  store i32 %62, i32* %15, align 16, !tbaa !39
  %63 = sub nsw i32 %54, %55
  store i32 %63, i32* %25, align 4, !tbaa !39
  %64 = add nsw i32 %57, %56
  store i32 %64, i32* %35, align 8, !tbaa !39
  %65 = sub nsw i32 %56, %57
  store i32 %65, i32* %45, align 4, !tbaa !39
  %66 = add nsw i32 %59, %58
  store i32 %66, i32* %47, align 16, !tbaa !39
  %67 = sub nsw i32 %58, %59
  store i32 %67, i32* %49, align 4, !tbaa !39
  %68 = add nsw i32 %61, %60
  store i32 %68, i32* %51, align 8, !tbaa !39
  %69 = sub nsw i32 %60, %61
  store i32 %69, i32* %53, align 4, !tbaa !39
  %70 = add nuw nsw i64 %5, 1
  %71 = icmp eq i64 %70, 8
  br i1 %71, label %72, label %4, !prof !41, !llvm.loop !42

72:                                               ; preds = %4, %72
  %73 = phi i64 [ %130, %72 ], [ 0, %4 ]
  %74 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16, !tbaa !39
  %77 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 4, i64 %73
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 16, !tbaa !39
  %80 = add nsw <4 x i32> %79, %76
  %81 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 1, i64 %73
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16, !tbaa !39
  %84 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 5, i64 %73
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 16, !tbaa !39
  %87 = add nsw <4 x i32> %86, %83
  %88 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 2, i64 %73
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16, !tbaa !39
  %91 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 6, i64 %73
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 16, !tbaa !39
  %94 = add nsw <4 x i32> %93, %90
  %95 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 3, i64 %73
  %96 = bitcast i32* %95 to <4 x i32>*
  %97 = load <4 x i32>, <4 x i32>* %96, align 16, !tbaa !39
  %98 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 7, i64 %73
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 16, !tbaa !39
  %101 = add nsw <4 x i32> %100, %97
  %102 = sub nsw <4 x i32> %76, %79
  %103 = sub nsw <4 x i32> %83, %86
  %104 = sub nsw <4 x i32> %90, %93
  %105 = sub nsw <4 x i32> %97, %100
  %106 = add nsw <4 x i32> %94, %80
  %107 = add nsw <4 x i32> %101, %87
  %108 = sub nsw <4 x i32> %80, %94
  %109 = sub nsw <4 x i32> %87, %101
  %110 = add nsw <4 x i32> %104, %102
  %111 = add nsw <4 x i32> %105, %103
  %112 = sub nsw <4 x i32> %102, %104
  %113 = sub nsw <4 x i32> %103, %105
  %114 = add nsw <4 x i32> %107, %106
  %115 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %115, align 16, !tbaa !39
  %116 = sub nsw <4 x i32> %106, %107
  %117 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %117, align 16, !tbaa !39
  %118 = add nsw <4 x i32> %109, %108
  %119 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %118, <4 x i32>* %119, align 16, !tbaa !39
  %120 = sub nsw <4 x i32> %108, %109
  %121 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %121, align 16, !tbaa !39
  %122 = add nsw <4 x i32> %111, %110
  %123 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %123, align 16, !tbaa !39
  %124 = sub nsw <4 x i32> %110, %111
  %125 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %125, align 16, !tbaa !39
  %126 = add nsw <4 x i32> %113, %112
  %127 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %127, align 16, !tbaa !39
  %128 = sub nsw <4 x i32> %112, %113
  %129 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %129, align 16, !tbaa !39
  %130 = add nuw i64 %73, 4
  %131 = icmp eq i64 %130, 8
  br i1 %131, label %132, label %72, !prof !44, !llvm.loop !45

132:                                              ; preds = %72, %132
  %133 = phi i64 [ %250, %132 ], [ 0, %72 ]
  %134 = phi <4 x i32> [ %249, %132 ], [ zeroinitializer, %72 ]
  %135 = or i64 %133, 1
  %136 = or i64 %133, 2
  %137 = or i64 %133, 3
  %138 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 0
  %139 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 0
  %140 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 0
  %141 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 0
  %142 = load i32, i32* %138, align 16, !tbaa !39
  %143 = load i32, i32* %139, align 16, !tbaa !39
  %144 = load i32, i32* %140, align 16, !tbaa !39
  %145 = load i32, i32* %141, align 16, !tbaa !39
  %146 = insertelement <4 x i32> poison, i32 %142, i64 0
  %147 = insertelement <4 x i32> %146, i32 %143, i64 1
  %148 = insertelement <4 x i32> %147, i32 %144, i64 2
  %149 = insertelement <4 x i32> %148, i32 %145, i64 3
  %150 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %149, i1 true)
  %151 = add <4 x i32> %150, %134
  %152 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 1
  %153 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 1
  %154 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 1
  %155 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 1
  %156 = load i32, i32* %152, align 4, !tbaa !39
  %157 = load i32, i32* %153, align 4, !tbaa !39
  %158 = load i32, i32* %154, align 4, !tbaa !39
  %159 = load i32, i32* %155, align 4, !tbaa !39
  %160 = insertelement <4 x i32> poison, i32 %156, i64 0
  %161 = insertelement <4 x i32> %160, i32 %157, i64 1
  %162 = insertelement <4 x i32> %161, i32 %158, i64 2
  %163 = insertelement <4 x i32> %162, i32 %159, i64 3
  %164 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %163, i1 true)
  %165 = add <4 x i32> %164, %151
  %166 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 2
  %167 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 2
  %168 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 2
  %169 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 2
  %170 = load i32, i32* %166, align 8, !tbaa !39
  %171 = load i32, i32* %167, align 8, !tbaa !39
  %172 = load i32, i32* %168, align 8, !tbaa !39
  %173 = load i32, i32* %169, align 8, !tbaa !39
  %174 = insertelement <4 x i32> poison, i32 %170, i64 0
  %175 = insertelement <4 x i32> %174, i32 %171, i64 1
  %176 = insertelement <4 x i32> %175, i32 %172, i64 2
  %177 = insertelement <4 x i32> %176, i32 %173, i64 3
  %178 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %177, i1 true)
  %179 = add <4 x i32> %178, %165
  %180 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 3
  %181 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 3
  %182 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 3
  %183 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 3
  %184 = load i32, i32* %180, align 4, !tbaa !39
  %185 = load i32, i32* %181, align 4, !tbaa !39
  %186 = load i32, i32* %182, align 4, !tbaa !39
  %187 = load i32, i32* %183, align 4, !tbaa !39
  %188 = insertelement <4 x i32> poison, i32 %184, i64 0
  %189 = insertelement <4 x i32> %188, i32 %185, i64 1
  %190 = insertelement <4 x i32> %189, i32 %186, i64 2
  %191 = insertelement <4 x i32> %190, i32 %187, i64 3
  %192 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %191, i1 true)
  %193 = add <4 x i32> %192, %179
  %194 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 4
  %195 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 4
  %196 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 4
  %197 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 4
  %198 = load i32, i32* %194, align 16, !tbaa !39
  %199 = load i32, i32* %195, align 16, !tbaa !39
  %200 = load i32, i32* %196, align 16, !tbaa !39
  %201 = load i32, i32* %197, align 16, !tbaa !39
  %202 = insertelement <4 x i32> poison, i32 %198, i64 0
  %203 = insertelement <4 x i32> %202, i32 %199, i64 1
  %204 = insertelement <4 x i32> %203, i32 %200, i64 2
  %205 = insertelement <4 x i32> %204, i32 %201, i64 3
  %206 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %205, i1 true)
  %207 = add <4 x i32> %206, %193
  %208 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 5
  %209 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 5
  %210 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 5
  %211 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 5
  %212 = load i32, i32* %208, align 4, !tbaa !39
  %213 = load i32, i32* %209, align 4, !tbaa !39
  %214 = load i32, i32* %210, align 4, !tbaa !39
  %215 = load i32, i32* %211, align 4, !tbaa !39
  %216 = insertelement <4 x i32> poison, i32 %212, i64 0
  %217 = insertelement <4 x i32> %216, i32 %213, i64 1
  %218 = insertelement <4 x i32> %217, i32 %214, i64 2
  %219 = insertelement <4 x i32> %218, i32 %215, i64 3
  %220 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %219, i1 true)
  %221 = add <4 x i32> %220, %207
  %222 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 6
  %223 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 6
  %224 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 6
  %225 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 6
  %226 = load i32, i32* %222, align 8, !tbaa !39
  %227 = load i32, i32* %223, align 8, !tbaa !39
  %228 = load i32, i32* %224, align 8, !tbaa !39
  %229 = load i32, i32* %225, align 8, !tbaa !39
  %230 = insertelement <4 x i32> poison, i32 %226, i64 0
  %231 = insertelement <4 x i32> %230, i32 %227, i64 1
  %232 = insertelement <4 x i32> %231, i32 %228, i64 2
  %233 = insertelement <4 x i32> %232, i32 %229, i64 3
  %234 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %233, i1 true)
  %235 = add <4 x i32> %234, %221
  %236 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %133, i64 7
  %237 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %135, i64 7
  %238 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %136, i64 7
  %239 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %2, i64 0, i64 %137, i64 7
  %240 = load i32, i32* %236, align 4, !tbaa !39
  %241 = load i32, i32* %237, align 4, !tbaa !39
  %242 = load i32, i32* %238, align 4, !tbaa !39
  %243 = load i32, i32* %239, align 4, !tbaa !39
  %244 = insertelement <4 x i32> poison, i32 %240, i64 0
  %245 = insertelement <4 x i32> %244, i32 %241, i64 1
  %246 = insertelement <4 x i32> %245, i32 %242, i64 2
  %247 = insertelement <4 x i32> %246, i32 %243, i64 3
  %248 = call <4 x i32> @llvm.abs.v4i32(<4 x i32> %247, i1 true)
  %249 = add <4 x i32> %248, %235
  %250 = add nuw i64 %133, 4
  %251 = icmp eq i64 %250, 8
  br i1 %251, label %252, label %132, !prof !44, !llvm.loop !47

252:                                              ; preds = %132
  %253 = call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %249)
  %254 = add nsw i32 %253, 2
  %255 = ashr i32 %254, 2
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3) #4
  ret i32 %255
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <4 x i32> @llvm.abs.v4i32(<4 x i32>, i1 immarg) #2

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #3

attributes #0 = { nofree nosync nounwind readonly uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nofree nosync nounwind readnone willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !29, !30, !31, !32}
!llvm.ident = !{!33}

!0 = !{i32 1, !"ProfileSummary", !1}
!1 = !{!2, !3, !4, !5, !6, !7, !8, !9, !10, !11}
!2 = !{!"ProfileFormat", !"InstrProf"}
!3 = !{!"TotalCount", i64 65}
!4 = !{!"MaxCount", i64 64}
!5 = !{!"MaxInternalCount", i64 0}
!6 = !{!"MaxFunctionCount", i64 64}
!7 = !{!"NumCounts", i64 2}
!8 = !{!"NumFunctions", i64 2}
!9 = !{!"IsPartialProfile", i64 0}
!10 = !{!"PartialProfileRatio", double 0.000000e+00}
!11 = !{!"DetailedSummary", !12}
!12 = !{!13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28}
!13 = !{i32 10000, i64 0, i32 0}
!14 = !{i32 100000, i64 64, i32 1}
!15 = !{i32 200000, i64 64, i32 1}
!16 = !{i32 300000, i64 64, i32 1}
!17 = !{i32 400000, i64 64, i32 1}
!18 = !{i32 500000, i64 64, i32 1}
!19 = !{i32 600000, i64 64, i32 1}
!20 = !{i32 700000, i64 64, i32 1}
!21 = !{i32 800000, i64 64, i32 1}
!22 = !{i32 900000, i64 64, i32 1}
!23 = !{i32 950000, i64 64, i32 1}
!24 = !{i32 990000, i64 64, i32 1}
!25 = !{i32 999000, i64 64, i32 1}
!26 = !{i32 999900, i64 64, i32 1}
!27 = !{i32 999990, i64 64, i32 1}
!28 = !{i32 999999, i64 64, i32 1}
!29 = !{i32 1, !"wchar_size", i32 4}
!30 = !{i32 7, !"PIC Level", i32 2}
!31 = !{i32 7, !"PIE Level", i32 2}
!32 = !{i32 7, !"uwtable", i32 1}
!33 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!34 = !{!"function_entry_count", i64 1}
!35 = !{!36, !36, i64 0}
!36 = !{!"short", !37, i64 0}
!37 = !{!"omnipotent char", !38, i64 0}
!38 = !{!"Simple C/C++ TBAA"}
!39 = !{!40, !40, i64 0}
!40 = !{!"int", !37, i64 0}
!41 = !{!"branch_weights", i32 2, i32 9}
!42 = distinct !{!42, !43}
!43 = !{!"llvm.loop.mustprogress"}
!44 = !{!"branch_weights", i32 2, i32 0}
!45 = distinct !{!45, !43, !46}
!46 = !{!"llvm.loop.isvectorized", i32 1}
!47 = distinct !{!47, !43, !46}
